{"ast":null,"code":"export class APIRequester {\n  async login(request) {\n    try {\n      const headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      const requestOptions = {\n        mode: 'cors',\n        body: JSON.stringify(request),\n        method: \"post\",\n        headers: headers\n      };\n      const response = await fetch(\"http://localhost:8082/auth/login\", requestOptions);\n      const loginResponse = await response.json();\n      if (!loginResponse.accept) return false;\n      document.cookie = `token=${loginResponse.token}`;\n      return true;\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n  }\n  async signup(request) {\n    try {\n      const headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      const requestOptions = {\n        mode: 'cors',\n        body: JSON.stringify(request),\n        method: \"post\",\n        headers: headers\n      };\n      const response = await fetch(\"http://localhost:8082/auth/signUp\", requestOptions);\n      return await response.json();\n    } catch (error) {\n      console.error(error);\n      return {\n        message: \"Network Error!\",\n        accept: false\n      };\n    }\n  }\n  async home() {\n    const token = document.cookie.split(\"=\")[1];\n    console.log(token);\n    const headers = {\n      \"Authorization\": `Bearer ${token}`\n    };\n    const requestOptions = {\n      mode: 'cors',\n      headers: headers,\n      method: \"get\",\n      credentials: \"include\"\n    };\n    console.log(requestOptions);\n    const response = await fetch(\"http://localhost:8082/Hello\", requestOptions);\n    return await response.text();\n  }\n}","map":{"version":3,"names":["APIRequester","login","request","headers","requestOptions","mode","body","JSON","stringify","method","response","fetch","loginResponse","json","accept","document","cookie","token","error","console","signup","message","home","split","log","credentials","text"],"sources":["C:/Users/MARWAN/Desktop/CSED/Computer Engineering Year 3/1st Semester/Software Engineering/Project/Central-Student-Hub/React/central-student-hub/src/services/APIRequester.ts"],"sourcesContent":["import { SignupRequest, SignupResponse } from './../UserSessionComponent/Models/SignupModels';\r\nimport { LoginRequest, LoginResponse } from '../UserSessionComponent/Models/LoginModels.ts'\r\nimport { FormState } from '../UserSessionComponent/Signup/Signup.tsx';\r\n\r\nexport class APIRequester {\r\n    async login(request: LoginRequest): Promise<boolean> {\r\n        try {\r\n            const headers: HeadersInit = { \"Content-Type\": \"application/json\" };\r\n            const requestOptions: RequestInit = { mode: 'cors', body: JSON.stringify(request), method: \"post\", headers: headers };\r\n            const response: Response = await fetch(\"http://localhost:8082/auth/login\", requestOptions);\r\n            const loginResponse: LoginResponse = await response.json();\r\n            if (!loginResponse.accept)\r\n                return false;\r\n            document.cookie = `token=${loginResponse.token}`\r\n            return true;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async signup(request: FormState): Promise<SignupResponse> {\r\n        try {\r\n            const headers: HeadersInit = { \"Content-Type\": \"application/json\" };\r\n            const requestOptions: RequestInit = { mode: 'cors', body: JSON.stringify(request), method: \"post\", headers: headers };\r\n            const response: Response = await fetch(\"http://localhost:8082/auth/signUp\", requestOptions);\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(error);\r\n            return {\r\n                message: \"Network Error!\",\r\n                accept: false\r\n            };\r\n        }\r\n    }\r\n\r\n    async home(): Promise<string> {\r\n        const token = document.cookie.split(\"=\")[1];\r\n        console.log(token);\r\n        const headers: HeadersInit = { \"Authorization\": `Bearer ${token}` };\r\n        const requestOptions: RequestInit = { mode: 'cors', headers: headers, method: \"get\", credentials: \"include\" };\r\n        console.log(requestOptions);\r\n        const response: Response = await fetch(\"http://localhost:8082/Hello\", requestOptions);\r\n        return await response.text();\r\n    }\r\n}"],"mappings":"AAIA,OAAO,MAAMA,YAAY,CAAC;EACtB,MAAMC,KAAKA,CAACC,OAAqB,EAAoB;IACjD,IAAI;MACA,MAAMC,OAAoB,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACnE,MAAMC,cAA2B,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;QAAEO,MAAM,EAAE,MAAM;QAAEN,OAAO,EAAEA;MAAQ,CAAC;MACrH,MAAMO,QAAkB,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAEP,cAAc,CAAC;MAC1F,MAAMQ,aAA4B,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC1D,IAAI,CAACD,aAAa,CAACE,MAAM,EACrB,OAAO,KAAK;MAChBC,QAAQ,CAACC,MAAM,GAAI,SAAQJ,aAAa,CAACK,KAAM,EAAC;MAChD,OAAO,IAAI;IACf,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAO,KAAK;IAChB;EACJ;EAEA,MAAME,MAAMA,CAAClB,OAAkB,EAA2B;IACtD,IAAI;MACA,MAAMC,OAAoB,GAAG;QAAE,cAAc,EAAE;MAAmB,CAAC;MACnE,MAAMC,cAA2B,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;QAAEO,MAAM,EAAE,MAAM;QAAEN,OAAO,EAAEA;MAAQ,CAAC;MACrH,MAAMO,QAAkB,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAEP,cAAc,CAAC;MAC3F,OAAO,MAAMM,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAO;QACHG,OAAO,EAAE,gBAAgB;QACzBP,MAAM,EAAE;MACZ,CAAC;IACL;EACJ;EAEA,MAAMQ,IAAIA,CAAA,EAAoB;IAC1B,MAAML,KAAK,GAAGF,QAAQ,CAACC,MAAM,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3CJ,OAAO,CAACK,GAAG,CAACP,KAAK,CAAC;IAClB,MAAMd,OAAoB,GAAG;MAAE,eAAe,EAAG,UAASc,KAAM;IAAE,CAAC;IACnE,MAAMb,cAA2B,GAAG;MAAEC,IAAI,EAAE,MAAM;MAAEF,OAAO,EAAEA,OAAO;MAAEM,MAAM,EAAE,KAAK;MAAEgB,WAAW,EAAE;IAAU,CAAC;IAC7GN,OAAO,CAACK,GAAG,CAACpB,cAAc,CAAC;IAC3B,MAAMM,QAAkB,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAEP,cAAc,CAAC;IACrF,OAAO,MAAMM,QAAQ,CAACgB,IAAI,CAAC,CAAC;EAChC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}